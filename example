// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Voting {
    // Struct to store candidate information
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    // Mapping to store candidates and voters
    mapping(uint => Candidate) public candidates;
    mapping(address => bool) public voters;

    // Variables to track number of candidates and voting status
    uint public candidatesCount;
    bool public votingOpen;

    // Constructor to initialize the contract
    constructor() {
        addCandidate("Candidate 1");
        addCandidate("Candidate 2");
        votingOpen = true;
    }

    // Function to add a candidate
    function addCandidate(string memory _name) private {
        candidatesCount++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
    }

    // Function to vote for a candidate
    function vote(uint _candidateId) public {
        require(votingOpen, "Voting is not open");
        require(!voters[msg.sender], "You have already voted");
        require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalid candidate");

        voters[msg.sender] = true;
        candidates[_candidateId].voteCount++;
    }

    // Function to close voting
    function closeVoting() public {
        require(votingOpen, "Voting is already closed");
        votingOpen = false;
    }

    // Function to get the winner
    function getWinner() public view returns (string memory) {
        require(!votingOpen, "Voting is still open");

        uint winningVoteCount = 0;
        uint winningCandidateId = 0;

        for (uint i = 1; i <= candidatesCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winningCandidateId = i;
            }
        }

        return candidates[winningCandidateId].name;
    }
}
